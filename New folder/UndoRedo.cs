///////////////////////////////////////////////////////////
//  UndoRedo.cs
//  Implementation of the Class UndoRedo
//  Generated by Enterprise Architect
//  Created on:      23-Sep-2020 7:57:59 PM
//  Original author: andrej
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



public class UndoRedo {

	private Stack<ICommandUR> _Redocommands = new Stack<ICommandUR>();
	private Stack<ICommandUR> _Undocommands = new Stack<ICommandUR>();

	private int id { get; set; }

	private IDBService service { get; set; }

	public UndoRedo(){
	}

	~UndoRedo(){

	}

	/// 
	/// <param name="trening"></param>
	public void InsertInUnDoRedoForAdd(int id, int role, IDBService service, Trening trening, out string message){

		message = "";
		ICommandUR commandUR = new AddTrening(trening);

		if (role == 0)
			message = commandUR.ExecuteA(id, service);
		else
			message = commandUR.ExecuteV(id, service);

		this.id = id;
		this.service = service;

		_Undocommands.Push(commandUR);
		_Redocommands.Clear();
	}

	/// 
	/// <param name="trening"></param>
	public void InsertInUnDoRedoForDelete(IDBService service, Trening trening){

		ICommandUR commandUR = new DeleteTrening(trening);

		//commandUR.Execute();

		_Undocommands.Push(commandUR);
		_Redocommands.Clear();
	}

	public void Redo(){
		if (_Redocommands.Count != 0)
		{
			ICommandUR commandUR = _Redocommands.Pop();
			commandUR.ExecuteA(this.id, this.service);
			_Undocommands.Push(commandUR);
		}
	}

	public void Undo(){
		if (_Undocommands.Count != 0)
		{
			ICommandUR commandUR = _Undocommands.Pop();
			//commandUR.UnExecuteA();
			_Redocommands.Push(commandUR);
		}
	}

}//end UndoRedo